/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BlueskyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = { handle: "", password: "", defaultHashtags: "" };
var BlueskyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.accessJwt = "";
    this.refreshJwt = "";
    this.userAvatar = "";
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({ id: "post-selection-to-bluesky", name: "Post selection to Bluesky", editorCallback: (editor, view) => {
      const selection = editor.getSelection();
      if (selection == null ? void 0 : selection.trim())
        new PostModal(this.app, this, selection).open();
      else
        new import_obsidian.Notice("\u30C6\u30AD\u30B9\u30C8\u3092\u9078\u629E\u3057\u3066\u304F\u3060\u3055\u3044");
    } });
    this.addCommand({ id: "post-note-to-bluesky", name: "Post current note to Bluesky", editorCallback: (editor, view) => {
      const content = editor.getValue();
      if (content == null ? void 0 : content.trim())
        new PostModal(this.app, this, content).open();
      else
        new import_obsidian.Notice("\u30CE\u30FC\u30C8\u304C\u7A7A\u3067\u3059");
    } });
    this.addCommand({ id: "create-new-post", name: "Create new Bluesky post", callback: () => new PostModal(this.app, this, "").open() });
    this.addRibbonIcon("send", "Post to Bluesky", () => new PostModal(this.app, this, "").open());
    this.addSettingTab(new BlueskySettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async login() {
    if (!this.settings.handle || !this.settings.password) {
      new import_obsidian.Notice("Bluesky\u306E\u30CF\u30F3\u30C9\u30EB\u3068\u30D1\u30B9\u30EF\u30FC\u30C9\u3092\u8A2D\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044");
      return false;
    }
    try {
      const resp = await fetch("https://bsky.social/xrpc/com.atproto.server.createSession", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ identifier: this.settings.handle, password: this.settings.password }) });
      if (!resp.ok)
        throw new Error(`\u30ED\u30B0\u30A4\u30F3\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${resp.status}`);
      const data = await resp.json();
      this.accessJwt = data.accessJwt;
      this.refreshJwt = data.refreshJwt;
      try {
        const profileResp = await fetch(`https://bsky.social/xrpc/app.bsky.actor.getProfile?actor=${data.did}`, { headers: { "Authorization": `Bearer ${this.accessJwt}` } });
        if (profileResp.ok) {
          const profileData = await profileResp.json();
          this.userAvatar = profileData.avatar || "";
        }
      } catch (e) {
        console.error("\u30A2\u30D0\u30BF\u30FC\u306E\u53D6\u5F97\u306B\u5931\u6557\u3057\u307E\u3057\u305F:", e);
      }
      return true;
    } catch (error) {
      new import_obsidian.Notice(`\u30ED\u30B0\u30A4\u30F3\u30A8\u30E9\u30FC: ${error.message}`);
      return false;
    }
  }
  detectFacets(text) {
    const facets = [];
    const encoder = new TextEncoder();
    const linkRegex = /https?:\/\/[^\s]+/g;
    let match;
    while ((match = linkRegex.exec(text)) !== null) {
      const uri = match[0];
      const byteStart = encoder.encode(text.slice(0, match.index)).length;
      const byteEnd = byteStart + encoder.encode(uri).length;
      facets.push({ index: { byteStart, byteEnd }, features: [{ $type: "app.bsky.richtext.facet#link", uri }] });
    }
    const hashtagRegex = /#[\w\u3040-\u309F\u30A0-\u30FF\u4E00-\u9FAF]+/g;
    while ((match = hashtagRegex.exec(text)) !== null) {
      const tag = match[0];
      if (tag.length > 66)
        continue;
      const byteStart = encoder.encode(text.slice(0, match.index)).length;
      const byteEnd = byteStart + encoder.encode(tag).length;
      const tagWithoutHash = tag.slice(1);
      facets.push({ index: { byteStart, byteEnd }, features: [{ $type: "app.bsky.richtext.facet#tag", tag: tagWithoutHash }] });
    }
    return facets.length > 0 ? facets : void 0;
  }
  async uploadBlob(blob, mimeType) {
    if (!this.accessJwt) {
      if (!await this.login())
        throw new Error("\u30ED\u30B0\u30A4\u30F3\u306B\u5931\u6557\u3057\u307E\u3057\u305F");
    }
    const response = await fetch("https://bsky.social/xrpc/com.atproto.repo.uploadBlob", { method: "POST", headers: { "Content-Type": mimeType, "Authorization": `Bearer ${this.accessJwt}` }, body: blob });
    if (!response.ok) {
      if (response.status === 401 && await this.login())
        return this.uploadBlob(blob, mimeType);
      throw new Error(`\u753B\u50CF\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${response.status}`);
    }
    return await response.json();
  }
  async postToBluesky(text, embed) {
    if (!text.trim() && (!embed || embed.$type !== "app.bsky.embed.images")) {
      new import_obsidian.Notice("\u6295\u7A3F\u5185\u5BB9\u304C\u7A7A\u3067\u3059");
      return false;
    }
    if (new TextEncoder().encode(text).length > 300) {
      new import_obsidian.Notice(`\u6295\u7A3F\u304C300\u30D0\u30A4\u30C8\u3092\u8D85\u3048\u3066\u3044\u307E\u3059\u3002\u30C6\u30AD\u30B9\u30C8\u3092\u77ED\u304F\u3057\u3066\u304F\u3060\u3055\u3044\u3002`);
      return false;
    }
    if (!this.accessJwt) {
      if (!await this.login())
        return false;
    }
    try {
      const record = { text, createdAt: new Date().toISOString(), $type: "app.bsky.feed.post" };
      const facets = this.detectFacets(text);
      if (facets)
        record.facets = facets;
      if (embed)
        record.embed = embed;
      const response = await fetch("https://bsky.social/xrpc/com.atproto.repo.createRecord", { method: "POST", headers: { "Content-Type": "application/json", "Authorization": `Bearer ${this.accessJwt}` }, body: JSON.stringify({ repo: this.settings.handle, collection: "app.bsky.feed.post", record }) });
      if (!response.ok) {
        if (response.status === 401 && await this.login())
          return this.postToBluesky(text, embed);
        const errorBody = await response.json();
        console.error("Bluesky post failed:", errorBody);
        throw new Error(`\u6295\u7A3F\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${response.status}`);
      }
      new import_obsidian.Notice("Bluesky\u306B\u6295\u7A3F\u3057\u307E\u3057\u305F\uFF01");
      return true;
    } catch (error) {
      new import_obsidian.Notice(`\u6295\u7A3F\u30A8\u30E9\u30FC: ${error.message}`);
      return false;
    }
  }
};
var PostModal = class extends import_obsidian.Modal {
  constructor(app, plugin, initialText) {
    super(app);
    this.linkPreviewData = null;
    this.selectedImages = [];
    this.debounceTimer = null;
    this.plugin = plugin;
    this.initialText = initialText;
  }
  onOpen() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("bluesky-modal-container");
    const headerEl = contentEl.createDiv({ cls: "bluesky-modal-header" });
    new import_obsidian.ButtonComponent(headerEl).setButtonText("\u30AD\u30E3\u30F3\u30BB\u30EB").onClick(() => this.close());
    this.postButton = new import_obsidian.ButtonComponent(headerEl).setButtonText("\u6295\u7A3F").setCta().onClick(() => this.handlePost());
    const mainEl = contentEl.createDiv({ cls: "bluesky-modal-main" });
    if (this.plugin.userAvatar) {
      mainEl.createEl("img", { cls: "bluesky-avatar", attr: { src: this.plugin.userAvatar } });
    }
    this.textArea = mainEl.createEl("textarea", { cls: "bluesky-textarea", attr: { placeholder: "\u6700\u8FD1\u3069\u3046\uFF1F" } });
    let displayText = this.initialText;
    if ((_a = this.plugin.settings.defaultHashtags) == null ? void 0 : _a.trim()) {
      displayText += (displayText ? "\n\n" : "") + this.plugin.settings.defaultHashtags.trim();
    }
    this.textArea.value = displayText;
    this.linkPreviewContainer = contentEl.createDiv({ cls: "bluesky-preview-container" });
    this.imagePreviewContainer = contentEl.createDiv({ cls: "bluesky-image-preview-container" });
    const footerEl = contentEl.createDiv({ cls: "bluesky-modal-footer" });
    const actionsEl = footerEl.createDiv({ cls: "bluesky-actions" });
    this.fileInput = contentEl.createEl("input", { type: "file", attr: { multiple: true, accept: "image/*", style: "display: none;" } });
    this.fileInput.onchange = (e) => this.handleFileSelect(e);
    new import_obsidian.ButtonComponent(actionsEl).setIcon("image-file").setTooltip("\u753B\u50CF\u3092\u8FFD\u52A0 (\u6700\u59274\u679A)").onClick(() => this.fileInput.click());
    this.charCountEl = footerEl.createDiv({ cls: "bluesky-char-count" });
    this.textArea.addEventListener("input", () => {
      this.updateCharCount();
      this.debounceUpdatePreviews();
    });
    this.updateCharCount();
    this.updateLinkPreview();
    setTimeout(() => {
      this.textArea.focus();
      this.textArea.setSelectionRange(this.initialText.length, this.initialText.length);
    }, 100);
    this.addStyles();
  }
  handleFileSelect(event) {
    const files = event.target.files;
    if (!files)
      return;
    if (this.selectedImages.length + files.length > 4) {
      new import_obsidian.Notice("\u753B\u50CF\u306F\u6700\u59274\u679A\u307E\u3067\u3067\u3059\u3002");
      return;
    }
    if (files.length > 0) {
      this.linkPreviewData = null;
      this.linkPreviewContainer.empty();
    }
    Array.from(files).forEach((file) => this.selectedImages.push(file));
    this.updateImagePreviews();
  }
  updateImagePreviews() {
    this.imagePreviewContainer.empty();
    this.selectedImages.forEach((file, index) => {
      const previewEl = this.imagePreviewContainer.createDiv({ cls: "bluesky-image-preview" });
      const img = previewEl.createEl("img");
      img.src = URL.createObjectURL(file);
      const removeBtn = previewEl.createDiv({ cls: "bluesky-remove-image-btn" });
      (0, import_obsidian.setIcon)(removeBtn, "x");
      removeBtn.onclick = () => {
        this.selectedImages.splice(index, 1);
        this.updateImagePreviews();
      };
    });
  }
  updateCharCount() {
    const byteLength = new TextEncoder().encode(this.textArea.value).length;
    this.charCountEl.textContent = `${byteLength}/300`;
    const isOverLimit = byteLength > 300;
    this.charCountEl.toggleClass("bluesky-over-limit", isOverLimit);
    this.postButton.setDisabled(isOverLimit);
  }
  debounceUpdatePreviews() {
    if (this.debounceTimer)
      clearTimeout(this.debounceTimer);
    this.debounceTimer = setTimeout(() => this.updateLinkPreview(), 500);
  }
  async updateLinkPreview() {
    var _a;
    if (this.selectedImages.length > 0)
      return;
    const match = this.textArea.value.match(/https?:\/\/[^\s]+/);
    const url = match ? match[0] : null;
    if (url && url === ((_a = this.linkPreviewData) == null ? void 0 : _a.url))
      return;
    this.linkPreviewContainer.empty();
    this.linkPreviewData = null;
    if (url) {
      this.linkPreviewData = await this.fetchLinkPreview(url);
      if (this.linkPreviewData)
        this.displayLinkPreview(this.linkPreviewData);
    }
  }
  async fetchLinkPreview(url) {
    var _a;
    try {
      const response = await (0, import_obsidian.requestUrl)({ url });
      const doc = new DOMParser().parseFromString(response.text, "text/html");
      const getMeta = (prop) => {
        var _a2;
        return (_a2 = doc.querySelector(`meta[property="${prop}"]`)) == null ? void 0 : _a2.getAttribute("content");
      };
      return { url, title: getMeta("og:title") || ((_a = doc.querySelector("title")) == null ? void 0 : _a.textContent) || url, description: getMeta("og:description") || getMeta("description") || "", image: getMeta("og:image"), domain: new URL(url).hostname };
    } catch (error) {
      console.error("Failed to fetch link preview:", error);
      return { url, title: url, domain: new URL(url).hostname };
    }
  }
  displayLinkPreview(preview) {
    this.linkPreviewContainer.empty();
    const cardEl = this.linkPreviewContainer.createDiv({ cls: "bluesky-link-card" });
    if (preview.image)
      cardEl.createEl("img", { cls: "bluesky-link-image" }).src = preview.image;
    const contentEl = cardEl.createDiv({ cls: "bluesky-link-content" });
    if (preview.title)
      contentEl.createDiv({ cls: "bluesky-link-title", text: preview.title });
    if (preview.description)
      contentEl.createDiv({ cls: "bluesky-link-description", text: preview.description });
    if (preview.domain)
      contentEl.createDiv({ cls: "bluesky-link-domain", text: preview.domain });
    cardEl.addEventListener("click", () => window.open(preview.url, "_blank"));
  }
  async handlePost() {
    var _a;
    const text = this.textArea.value.trim();
    if (!text && this.selectedImages.length === 0) {
      new import_obsidian.Notice("\u6295\u7A3F\u5185\u5BB9\u3092\u5165\u529B\u3057\u3066\u304F\u3060\u3055\u3044");
      return;
    }
    this.postButton.setButtonText("Posting...").setDisabled(true);
    let embed;
    if (this.selectedImages.length > 0) {
      try {
        const uploadedImages = await Promise.all(this.selectedImages.map(async (file) => {
          const imageBitmap = await createImageBitmap(file);
          const { width, height } = imageBitmap;
          const canvas = document.createElement("canvas");
          canvas.width = width;
          canvas.height = height;
          const ctx = canvas.getContext("2d");
          if (!ctx)
            throw new Error("Failed to get canvas context");
          ctx.drawImage(imageBitmap, 0, 0);
          const processedBlob = await new Promise((resolve, reject) => {
            canvas.toBlob((blob) => blob ? resolve(blob) : reject(new Error("Canvas to Blob conversion failed")), file.type);
          });
          const buffer = await processedBlob.arrayBuffer();
          const uploaded = await this.plugin.uploadBlob(buffer, processedBlob.type);
          return {
            image: uploaded.blob,
            alt: "",
            // ここに代替テキストを入れることも可能
            aspectRatio: { width, height }
          };
        }));
        embed = { $type: "app.bsky.embed.images", images: uploadedImages };
      } catch (error) {
        new import_obsidian.Notice(`\u753B\u50CF\u30A2\u30C3\u30D7\u30ED\u30FC\u30C9\u30A8\u30E9\u30FC: ${error.message}`);
        this.postButton.setButtonText("Post").setDisabled(false);
        return;
      }
    } else if ((_a = this.linkPreviewData) == null ? void 0 : _a.title) {
      let thumb;
      if (this.linkPreviewData.image) {
        try {
          const imgResponse = await (0, import_obsidian.requestUrl)({ url: this.linkPreviewData.image });
          const blob = imgResponse.arrayBuffer;
          const mimeType = imgResponse.headers["content-type"] || "image/jpeg";
          const uploadedImage = await this.plugin.uploadBlob(blob, mimeType);
          thumb = { $type: "blob", ref: uploadedImage.blob.ref, mimeType: uploadedImage.blob.mimeType, size: uploadedImage.blob.size };
        } catch (error) {
          console.error("Image upload failed:", error);
        }
      }
      embed = { $type: "app.bsky.embed.external", external: { uri: this.linkPreviewData.url, title: this.linkPreviewData.title, description: this.linkPreviewData.description || "", thumb } };
    }
    if (await this.plugin.postToBluesky(text, embed))
      this.close();
    else
      this.postButton.setButtonText("Post").setDisabled(false);
  }
  addStyles() {
    const styleId = "bluesky-plugin-styles";
    if (document.getElementById(styleId))
      return;
    const styleEl = document.createElement("style");
    styleEl.id = styleId;
    styleEl.textContent = `
            .bluesky-modal-container { display: flex; flex-direction: column; height: 100%; }
            .bluesky-modal-header { display: flex; justify-content: space-between; align-items: center; padding-bottom: 12px; margin-top: 10px; }
            .bluesky-modal-main { display: flex; flex-grow: 1; }
            .bluesky-avatar { width: 50px; height: 50px; border-radius: 50%; margin-right: 12px; }
            .bluesky-textarea { width: 100%; min-height: 150px; flex-grow: 1; padding: 0; border: none; background: transparent; color: var(--text-normal); font-family: var(--font-text); font-size: 18px; line-height: 1.5; resize: none; }
            .bluesky-textarea:focus { outline: none; box-shadow: none; }
			.bluesky-preview-container { margin: 12px 0; }
			.bluesky-link-card { display: flex; border: 1px solid var(--background-modifier-border); border-radius: 8px; overflow: hidden; background: var(--background-secondary); cursor: pointer; }
			.bluesky-link-image { width: 100px; height: 100px; object-fit: cover; flex-shrink: 0; }
			.bluesky-link-content { padding: 12px; display: flex; flex-direction: column; overflow: hidden; }
			.bluesky-link-title { font-weight: 600; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
			.bluesky-link-description { font-size: 12px; color: var(--text-muted); margin-top: 4px; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; }
			.bluesky-link-domain { font-size: 12px; color: var(--text-muted); margin-top: auto; }
            .bluesky-image-preview-container { display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 8px; margin: 12px 0; }
            .bluesky-image-preview { position: relative; }
            .bluesky-image-preview img { width: 100%; height: auto; border-radius: 8px; }
            .bluesky-remove-image-btn { position: absolute; top: 4px; right: 4px; background-color: rgba(0,0,0,0.6); color: white; border-radius: 50%; width: 20px; height: 20px; display: flex; align-items: center; justify-content: center; cursor: pointer; }
            .bluesky-modal-footer { display: flex; justify-content: space-between; align-items: center; padding-top: 12px; border-top: 1px solid var(--background-modifier-border); }
			.bluesky-char-count { font-size: 12px; color: var(--text-muted); }
			.bluesky-char-count.bluesky-over-limit { color: var(--text-error); font-weight: bold; }
		`;
    document.head.appendChild(styleEl);
  }
  onClose() {
    if (this.debounceTimer)
      clearTimeout(this.debounceTimer);
    this.contentEl.empty();
  }
};
var BlueskySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Bluesky Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Bluesky Handle").setDesc("\u3042\u306A\u305F\u306EBluesky\u30CF\u30F3\u30C9\u30EB\uFF08\u4F8B: username.bsky.social\uFF09").addText((text) => text.setPlaceholder("username.bsky.social").setValue(this.plugin.settings.handle).onChange(async (value) => {
      this.plugin.settings.handle = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("App Password").setDesc("Bluesky\u306EApp Password\uFF08\u8A2D\u5B9A\u304B\u3089\u4F5C\u6210\u3057\u3066\u304F\u3060\u3055\u3044\uFF09").addText((text) => text.setPlaceholder("xxxx-xxxx-xxxx-xxxx").setValue(this.plugin.settings.password).onChange(async (value) => {
      this.plugin.settings.password = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Hashtags").setDesc("\u6295\u7A3F\u306B\u81EA\u52D5\u3067\u8FFD\u52A0\u3059\u308B\u30CF\u30C3\u30B7\u30E5\u30BF\u30B0\uFF08\u6539\u884C\u3057\u3066\u8FFD\u52A0\u3055\u308C\u307E\u3059\uFF09").addText((text) => text.setPlaceholder("#obsidian #note").setValue(this.plugin.settings.defaultHashtags).onChange(async (value) => {
      this.plugin.settings.defaultHashtags = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("p", { text: "\u6CE8\u610F: App Password\u3092\u4F7F\u7528\u3057\u3066\u304F\u3060\u3055\u3044\u3002\u30E1\u30A4\u30F3\u30D1\u30B9\u30EF\u30FC\u30C9\u306F\u4F7F\u7528\u3057\u306A\u3044\u3067\u304F\u3060\u3055\u3044\u3002", cls: "setting-item-description" });
  }
};
//# sourceMappingURL=data:application/json;base64,
